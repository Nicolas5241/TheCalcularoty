import { Button, LineEdit } from "std-widgets.slint";
import { ComboInput, TwoRadioButtons } from "components.slint";

export component ImpPage inherits Rectangle {
	Image {
		source: @image-url("../assets/impedanc.jpg");
		image-fit: fill; 
		opacity: 0.3;
		width: root.width;
		height: root.height;
	}

	callback go_back;
	callback calcularot(string, string, string, string, string, string, int, string, string, string, string);

	in property <[string]> l-model;
	in property <[string]> c-model;
	in property <[string]> f-model;
	in property <[string]> r-model;

	in-out property <string> inductance;
	in-out property <string> capacitance;
	in-out property <string> frequency;

	in property <string> impedance;
	in property <string> inductive-reactance;
	in property <string> capacitive-reactance;
	in property <string> resonant-frequency;
	
	VerticalLayout {
		padding-top: 10px;
		padding-bottom: 10px;
		padding-left: 20px;
		padding-right: 20px;

		alignment: space-around;

		property <length> input-text-width: 120px;
		property <length> output-text-width: 155px;

		Text {
			text: "IMP Calcularoty";
			horizontal-alignment: center;
			font-size: 30px;
		}

		l-input := ComboInput {
			label: "Inductance:";
			text-width: input-text-width;
			combobox-model: l-model;
			combo-value: "mH";
			input-type: decimal;
			input-text <=> inductance;
		}

		c-input := ComboInput {
			label: "Capacitance:";
			text-width: input-text-width;
			combobox-model: c-model;
			combo-value: "μF";
			input-type: decimal;
			input-text <=> capacitance;
		}

		f-input := ComboInput {
			label: "Frequency:";
			text-width: input-text-width;
			combobox-model: f-model;
			combo-value: "Hz";
			input-type: decimal;
			input-text <=> frequency;
		}

		circuit-type := TwoRadioButtons {
			labels: ["Série", "Paralelo"];
		}

		imp-out := ComboInput {
			label: "Impedance:";
			text-width: output-text-width;
			input-text: impedance;
			read-only: true;
			combobox-model: r-model;
			combo-value: "Ω";
		}
		
		xl-out := ComboInput {
			label: "Inductive Freq.:";
			text-width: output-text-width;
			input-text: inductive-reactance;
			read-only: true;
			combobox-model: r-model;
			combo-value: "Ω";
		}
		
		xc-out := ComboInput {
			label: "Capacitive Freq.:";
			text-width: output-text-width;
			input-text: capacitive-reactance;
			read-only: true;
			combobox-model: r-model;
			combo-value: "Ω";
		}

		rf-out := ComboInput {
			label: "Resonant Freq.:";
			text-width: output-text-width;
			input-text: resonant-frequency;
			read-only: true;
			combobox-model: f-model;
			combo-value: "Hz";
		}
		
		VerticalLayout {
			spacing: 20px;
			HorizontalLayout {
				alignment: center;
				Button {
					text: "Calcularot";
					width: 150px;
					clicked => { calcularot(l-input.input-text, c-input.input-text, f-input.input-text, l-input.combo-value, c-input.combo-value, f-input.combo-value, circuit-type.get_selected(), imp-out.combo-value, xl-out.combo-value, xc-out.combo-value, rf-out.combo-value) }
				}
			}
			HorizontalLayout {
				alignment: center;
				Button {
					text: "Escape";
					width: 150px;
					clicked => { go_back() }
				}
			}
		}
	}
}
