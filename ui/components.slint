import { LineEdit, ComboBox, CheckBox } from "std-widgets.slint";

export component UserInput inherits HorizontalLayout {
	in property <bool> stroked: false;
	in property <length> stroke-width: 3px;
	in property <brush> stroke-color: black;
	in property <string> label: "label";
	in property <length> font-size: 20px;
	
	spacing: 20px;

	public function get_input() -> string {
	    input.text
	}

	if stroked: Text {
		text: label;
		stroke: stroke-color;
		stroke-width: stroke-width;
		font-size: font-size;
	}
	if !stroked: Text {
		text: label;
		font-size: font-size;
	}
	input := LineEdit {}
}

export component ComboInput inherits HorizontalLayout {
	in property <[string]> combobox-model: [""];
	in property <InputType> input-type: text;
	in property <bool> read-only: false;
	in property <bool> combo-read-only: false;
	in property <length> input-height: 30px;
	in property <length> combo-width: 100px;
	in property <string> label;
	in property <length> text-width: -1px;

	in-out property <string> combo-value;
	
	in-out property <string> input-text;

	callback combo_changed(string);

	changed combo-value => { combo_changed(combo-value) }

	spacing: 5px;

	if label != "" && text-width != -1px: Text {
		text: label;
		font-size: 20px;
		width: text-width;
	}

	if label != "" && text-width == -1px: Text {
		text: label;
		font-size: 20px;
	}

	input := LineEdit {
		input-type: input-type;
		read-only: read-only;
		text <=> input-text;
		height: input-height;
		horizontal-alignment: left;
	}

	combo := ComboBox {
		model: combobox-model;
		enabled: !combo-read-only;
		current-value <=> combo-value;
		height: input-height;
		width: combo-width;
		vertical-stretch: 0;
	}
}

//TODO: Fix
export component TwoRadioButtons inherits HorizontalLayout {
	in property <[string]> labels: [""];

	out property <bool> is_radio1: false;
	out property <bool> is_radio2: false;

	public function get_selected() -> int {
		if is_radio1 {
			return 0;
		} if is_radio2 {
			return 1;
		}
		-1
	}

	alignment: space-around;
	spacing: 20px;	

	CheckBox {
		text: labels[0];
		checked <=> is_radio1;
		
		toggled => {
			is_radio1 = true;

			is_radio2 = false;
		}
	}

	CheckBox {
		text: labels[1];
		checked <=> is_radio2;

		toggled => {
			if !is_radio2 {
				is_radio2 = true;
			}

			is_radio1 = false;
		}
	}
}
